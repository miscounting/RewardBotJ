{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["log","type","console","bind","defaultJson","App","props","useState","formData","setFormData","Container","Grid","container","spacing","item","xs","schema","onChange","onSubmit","a","onError","JSON","stringify","Boolean","window","location","hostname","match","fetch","mode","then","response","json","ReactDOM","render","document","getElementById","catch","err","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0RAKMA,EAAM,SAACC,GAAD,OAAUC,QAAQF,IAAIG,KAAKD,QAASD,IAE1CG,EAAc,CAChB,SAAY,wCACZ,QAAW,iBACX,MAAS,0BACT,SAAY,CACR,CACI,aAAgB,0BAChB,eAAkB,4CAClB,OAAU,CACN,KAAQ,wBACR,YAAe,2BACf,iBAAoB,wBACpB,gBAAmB,CACf,CACI,KAAQ,WACR,iBAAoB,yBAExB,CACI,KAAQ,WACR,YAAe,oBAgCxBC,EAxBH,SAACC,GAAW,IAAD,EACaC,mBAASH,GADtB,mBACZI,EADY,KACFC,EADE,KAGnB,OAAO,kBAACC,EAAA,EAAD,KACH,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAAC,IAAD,CAAMC,OAAQV,EAAMU,OACdR,SAAUA,EACVS,SAAUjB,EAAI,WACdkB,SAAU,SAACC,GACPV,EAAYU,EAAEX,WAGtBY,QAASpB,EAAI,aAEnB,kBAACW,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,6BACI,6BAAMM,KAAKC,UAAUd,EAAU,KAAM,SCvCrCe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,MAAM,+GACF,CAACC,KAAM,SACNC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAd,GACJiB,IAASC,OACP,kBAAC,EAAD,CAAKlB,OAAUA,IACfmB,SAASC,eAAe,YAG3BC,OAAM,SAAAC,GACHpC,QAAQF,IAAIsC,MDmHd,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBX,MAAK,SAAAY,GACJA,EAAaC,gBAEdN,OAAM,SAAAO,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.878e2e28.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Form from \"@rjsf/material-ui\";\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\n\nconst log = (type) => console.log.bind(console, type);\n\nconst defaultJson = {\n    \"bot_name\": \"Your bot's twitch ID, if you have one\",\n    \"channel\": \"Your twitch ID\",\n    \"oauth\": \"your secret OAUTH token\",\n    \"commands\": [\n        {\n            \"optionalName\": \"press some keys command\",\n            \"twitchRewardId\": \"The ID twitch uses for your points reward\",\n            \"action\": {\n                \"name\": \"What I want to happen\",\n                \"keysToPress\": \"shift control alt meta 1\",\n                \"messageToWhisper\": \"!icanwhispertoyourbot\",\n                \"performAtRandom\": [\n                    {\n                        \"name\": \"action A\",\n                        \"messageToWhisper\": \"Hey bot, play sound A\"\n                    },\n                    {\n                        \"name\": \"action C\",\n                        \"keysToPress\": \"alt shift 1\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n\nconst App = (props) => {\n    const [formData, setFormData] = useState(defaultJson);\n\n    return <Container>\n        <Grid container spacing={3}>\n            <Grid item xs={7}>\n                <Form schema={props.schema}\n                      formData={formData}\n                      onChange={log(\"changed\")}\n                      onSubmit={(a) => {\n                          setFormData(a.formData)\n                        }\n                      }\n                  onError={log(\"errors\")}/>\n            </Grid>\n            <Grid item xs={3}>\n                <div>\n                    <pre>{JSON.stringify(formData, null, 4)}</pre>\n                </div>\n            </Grid>\n        </Grid>\n    </Container>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfetch(\"https://raw.githubusercontent.com/miscounting/RewardBotJ/master/src/main/resources/schema/config.schema.json\",\n    {mode: \"cors\"})\n    .then(response => response.json())\n    .then(schema => {\n      ReactDOM.render(\n        <App schema = {schema} />,\n        document.getElementById('root')\n      );\n    } )\n    .catch(err => {\n        console.log(err)\n    });\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}